// Generated by CoffeeScript 1.7.1
(function() {
  var char, chars, down, left, preferred, right, up, width,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  chars = [[[' ╷╻', '╶┌┎', '╺┍┏'], ['╵│╽', '└├┟', '┕┝┢'], ['╹╿┃', '┖┞┠', '┗┡┣']], [['╴┐┒', '─┬┰', '╼┮┲'], ['┘┤┧', '┴┼╁', '┶┾╆'], ['┚┦┨', '┸╀╂', '┺╄╊']], [['╸┑┓', '╾┭┱', '━┯┳'], ['┙┥┪', '┵┽╅', '┷┿╈'], ['┛┩┫', '┹╃╉', '┻╇╋']]];

  chars = (function() {
    var _i, _len, _results;
    _results = [];
    for (_i = 0, _len = chars.length; _i < _len; _i++) {
      left = chars[_i];
      _results.push((function() {
        var _j, _len1, _results1;
        _results1 = [];
        for (_j = 0, _len1 = left.length; _j < _len1; _j++) {
          up = left[_j];
          _results1.push((function() {
            var _k, _len2, _results2;
            _results2 = [];
            for (_k = 0, _len2 = up.length; _k < _len2; _k++) {
              right = up[_k];
              down = right.split('');
              _results2.push((function() {
                var _l, _len3, _results3;
                _results3 = [];
                for (_l = 0, _len3 = down.length; _l < _len3; _l++) {
                  char = down[_l];
                  _results3.push({
                    "default": char
                  });
                }
                return _results3;
              })());
            }
            return _results2;
          })());
        }
        return _results1;
      })());
    }
    return _results;
  })();

  chars[0][0][1][1].rounded = '╭';

  chars[0][1][1][0].rounded = '╰';

  chars[1][1][0][0].rounded = '╯';

  chars[1][0][0][1].rounded = '╮';

  chars[0][0][1][2].double = '╓';

  chars[0][0][2][1].double = '╒';

  chars[0][0][2][2].double = '╔';

  chars[0][1][2][0].double = '╘';

  chars[0][1][2][1].double = '╞';

  chars[0][2][0][2].double = '║';

  chars[0][2][1][0].double = '╙';

  chars[0][2][1][2].double = '╟';

  chars[0][2][2][0].double = '╚';

  chars[0][2][2][2].double = '╠';

  chars[1][0][0][2].double = '╖';

  chars[1][0][1][2].double = '╥';

  chars[1][2][0][0].double = '╜';

  chars[1][2][0][2].double = '╢';

  chars[1][2][1][0].double = '╨';

  chars[1][2][1][2].double = '╫';

  chars[2][0][0][1].double = '╕';

  chars[2][0][0][2].double = '╗';

  chars[2][0][2][0].double = '═';

  chars[2][0][2][1].double = '╤';

  chars[2][0][2][2].double = '╦';

  chars[2][1][0][0].double = '╛';

  chars[2][1][0][1].double = '╡';

  chars[2][1][2][0].double = '╧';

  chars[2][1][2][1].double = '╪';

  chars[2][2][0][0].double = '╝';

  chars[2][2][0][2].double = '╣';

  chars[2][2][2][0].double = '╩';

  chars[2][2][2][2].double = '╬';

  width = function(style) {
    switch (style) {
      case 'normal':
      case 'rounded':
        return 1;
      case 'bold':
      case 'double':
        return 2;
      default:
        return 0;
    }
  };

  preferred = function(_arg) {
    var count, counts, down, left, max, maxes, right, style, up, _i, _len, _ref;
    left = _arg.left, up = _arg.up, right = _arg.right, down = _arg.down;
    counts = {};
    _ref = [left, up, right, down];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      style = _ref[_i];
      if (!(style !== 'none' && style !== 'normal')) {
        continue;
      }
      if (counts[style] == null) {
        counts[style] = 0;
      }
      counts[style] += 1;
    }
    max = 0;
    maxes = false;
    for (style in counts) {
      count = counts[style];
      if (count === 3) {
        return style;
      }
      if (count > max) {
        max = count;
        maxes = [style];
      } else if (count === max) {
        maxes = maxes.concat([style]);
      }
    }
    if (max === 2) {
      if (maxes.length !== 2) {
        return maxes[0];
      } else {
        down;
      }
    }
    if (__indexOf.call(maxes, down) >= 0) {
      return down;
    } else if (__indexOf.call(maxes, up) >= 0) {
      return up;
    } else if (__indexOf.call(maxes, right) >= 0) {
      return right;
    } else if (__indexOf.call(maxes, left) >= 0) {
      return left;
    }
    return 'normal';
  };

  module.exports = function(_arg) {
    var down, left, opt, options, right, style, styles, up, _i, _len, _ref;
    left = _arg.left, up = _arg.up, right = _arg.right, down = _arg.down;
    if (left == null) {
      left = 'none';
    }
    if (up == null) {
      up = 'none';
    }
    if (right == null) {
      right = 'none';
    }
    if (down == null) {
      down = 'none';
    }
    styles = {};
    _ref = [left, up, right, down];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      style = _ref[_i];
      if (!(style !== 'none')) {
        continue;
      }
      if (styles[style] == null) {
        styles[style] = 0;
      }
      styles[style] += 1;
    }
    options = chars[width(left)][width(up)][width(right)][width(down)];
    opt = preferred({
      left: left,
      up: up,
      right: right,
      down: down
    });
    if (opt in options) {
      return options[opt];
    } else {
      return options["default"];
    }
  };

}).call(this);
