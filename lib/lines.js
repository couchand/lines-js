// Generated by CoffeeScript 1.7.1
(function() {
  var Lines, Stream, cell, line,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Stream = require('stream');

  cell = require('./cell');

  line = require('./line');

  Lines = (function(_super) {
    __extends(Lines, _super);

    function Lines() {
      Lines.__super__.constructor.call(this);
      this._lines = [];
    }

    Lines.prototype._read = function() {};

    Lines.prototype.flush = function() {
      return this.push(this.toString());
    };

    Lines.prototype.line = function() {
      this._lines = this._lines.concat([line.apply(null, arguments)]);
      return this;
    };

    Lines.prototype.box = function() {
      var from, style, to, _ref;
      if (arguments.length === 1) {
        _ref = arguments[0], from = _ref.from, to = _ref.to, style = _ref.style;
      } else {
        from = arguments[0];
        to = arguments[1];
        style = arguments[2];
      }
      this.line({
        from: from,
        to: [from[0], to[1]],
        style: style
      });
      this.line({
        from: [from[0], to[1]],
        to: to,
        style: style
      });
      this.line({
        from: to,
        to: [to[0], from[1]],
        style: style
      });
      this.line({
        from: [to[0], from[1]],
        to: from,
        style: style
      });
      return this;
    };

    Lines.prototype.lines = function() {
      return this._lines;
    };

    Lines.prototype.toString = function() {
      var buffers, col, cols, down, l, left, lines, right, row, rows, up, _i, _j, _k, _len, _ref, _ref1;
      lines = this.lines();
      cols = Math.max(Math.max.apply(null, lines.map(function(l) {
        return l.from[0];
      })), Math.max.apply(null, lines.map(function(l) {
        return l.to[0];
      })));
      rows = Math.max(Math.max.apply(null, lines.map(function(l) {
        return l.from[1];
      })), Math.max.apply(null, lines.map(function(l) {
        return l.to[1];
      })));
      buffers = (function() {
        var _i, _results;
        _results = [];
        for (row = _i = 0; 0 <= rows ? _i <= rows : _i >= rows; row = 0 <= rows ? ++_i : --_i) {
          _results.push((function() {
            var _j, _results1;
            _results1 = [];
            for (col = _j = 0; 0 <= cols ? _j <= cols : _j >= cols; col = 0 <= cols ? ++_j : --_j) {
              _results1.push(cell());
            }
            return _results1;
          })());
        }
        return _results;
      })();
      for (_i = 0, _len = lines.length; _i < _len; _i++) {
        l = lines[_i];
        switch (true) {
          case l.horizontal():
            left = Math.min(l.from[0], l.to[0]);
            right = Math.max(l.from[0], l.to[0]);
            row = buffers[l.from[1]];
            row[left].right(l.style);
            row[right].left(l.style);
            for (col = _j = _ref = left + 1; _ref <= right ? _j < right : _j > right; col = _ref <= right ? ++_j : --_j) {
              row[col].left(l.style);
              row[col].right(l.style);
            }
            break;
          case l.vertical():
            up = Math.min(l.from[1], l.to[1]);
            down = Math.max(l.from[1], l.to[1]);
            col = l.from[0];
            buffers[up][col].down(l.style);
            buffers[down][col].up(l.style);
            for (row = _k = _ref1 = up + 1; _ref1 <= down ? _k < down : _k > down; row = _ref1 <= down ? ++_k : --_k) {
              buffers[row][col].up(l.style);
              buffers[row][col].down(l.style);
            }
        }
      }
      return buffers.map(function(buffer) {
        return buffer.map(function(cell) {
          return cell.toString();
        }).join('');
      }).join('\n');
    };

    return Lines;

  })(Stream.Readable);

  module.exports = function() {
    return new Lines();
  };

}).call(this);
